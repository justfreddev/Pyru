source -> declaration* EOF ;

declaration -> functionDeclaration
             | variableDeclaration
             | statement ;

functionDeclaration -> "def" function;
variableDeclaration -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement -> expressionStatement
           | forStatement
           | ifStatement
           | printStatement
           | returnStatement
           | whileStatement
           | block ;

expressionStatement -> expression ";" ;
forStatement -> "for" "(" ( variableDeclaration | expressionStatement | ";" )
                          expression? ";"
                          expression? ")" statement ;
ifStatement -> "if" "(" expression ") statement
                ( "else" statement )? ;
printStatement -> "print" expression ";" ;
returnStatement -> "return" expression? ";" ;
whileStatement -> "while" "(" expression ")" statement ;
block -> "{" declaration* "}" ;

expression -> assignment ;

assignment -> IDENTIFIER "=" alteration | assignment | logic_or ;

logic_or -> logic_and ( "or" logic_and )* ;
logic_and -> equality ( "and" equality )* ;
equality -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term -> factor ( ( "-" | "+" ) factor )* ;
factor -> unary ( ( "/" | "*" ) unary )* ;

unary -> ( "!" | "-" ) | call ;
call -> primary "(" arguments? ")" ;
primary -> "true" | "false" | "null" | NUMBER | STRING | IDENTIFIER | "(" expression ")" ;

function -> IDENTIFIER "(" parameters? ")" block ;
parameters -> IDENTIFIER ( "," IDENTIFIER )* ;
arguments -> IDENTIFIER ( "," expression )* ;

NUMBER -> DIGIT+ ( "." DIGIT+ )? ;
STRING -> "\"" <any char except "\"">* "\"" ;
IDENTIFIER -> ALPHA ( ALPHA | DIGIT )* ;
ALPHA -> "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT -> "0" ... "9" ;